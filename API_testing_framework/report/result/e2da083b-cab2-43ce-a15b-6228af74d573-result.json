{"name": "登录店员端", "status": "broken", "statusDetails": {"message": "ValueError: malformed node or string: <_ast.Name object at 0x0000028609B92DA0>", "trace": "self = <test_api.Test_API object at 0x0000028609837F98>\ndata = {'case_code': 200.0, 'case_data': '{\"code\":\"666666\",\"phone\":\"13577777777\",\"app_id\":\"6015\",\"cj_type\":0,\"token\":\"TOKEN\",\"user_id\":\"USER_ID\"}', 'case_headers': \"{'Content-Type': 'application/json;charset=UTF-8'}\", 'case_id': 'case_002', ...}\n\n    @pytest.mark.parametrize('data', excel)\n    @allure.step('传入用例')\n    def test_gwyc_api(self,data):\n        \"\"\"\n        调用接口\n        :param data: 接口信息\n        :return:\n        \"\"\"\n        # for i in data:\n        #     data = i\n        #     return data\n    \n        allure.dynamic.story(data['case_module'])\n        allure.dynamic.title(data['case_name'])\n    \n        # 对请求头做为空处理并添加token\n        headers = data['case_headers']\n        #将字符串转化为字典\n        headers = ast.literal_eval(headers)\n    \n    \n        # 对请求参数做为空处理\n        params = data['case_data']\n        if len(str(params).split()) == 0:\n            pass\n        elif len(str(params)) >= 0:\n            params = params\n    \n    \n    \n        # 执行用例\n        if data['case_method'] == 'get':\n            r = ApiRequst().send_requests(\n                method='get',\n                url=data['case_url'],\n                json=params,\n                headers=headers\n            )\n            allure.attach(\"返回结果\",'{0}'.format(r.json()))#在报告中显示返回结果\n            assert int(r.json()['code']) == int(data['case_code'])   # 断言验证状态码\n            allure.attach(\"验证响应数据，{0}\".format(print(assert_content(data['case_result'],r.json()))))\n    \n            # assert data['case_result'] in json.dumps(r.json(), ensure_ascii=False)  # 验证响应数据\n        elif data['case_method'] == 'post':\n            r = ApiRequst().send_requests(\n                method='post',\n                url=data['case_url'],\n                json=ast.literal_eval(params),\n                headers=headers\n            )\n            allure.attach(\"返回结果\",'{0}'.format(r.json()))\n            assert int(r.json()['code']) == int(data['case_code'])  # 验证状态码\n>           allure.attach(\"验证响应数据，{0}\".format(print(assert_content(data['case_result'], r.json()))))\n\ntest_case\\test_api.py:70: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ncommon\\assert_result.py:12: in assert_content\n    case_result =ast.literal_eval(case_result)\n..\\..\\lib\\ast.py:91: in literal_eval\n    return _convert(node_or_string)\n..\\..\\lib\\ast.py:79: in _convert\n    map(_convert, node.values)))\n..\\..\\lib\\ast.py:90: in _convert\n    return _convert_signed_num(node)\n..\\..\\lib\\ast.py:63: in _convert_signed_num\n    return _convert_num(node)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nnode = <_ast.Name object at 0x0000028609B92DA0>\n\n    def _convert_num(node):\n        if isinstance(node, Constant):\n            if isinstance(node.value, (int, float, complex)):\n                return node.value\n        elif isinstance(node, Num):\n            return node.n\n>       raise ValueError('malformed node or string: ' + repr(node))\nE       ValueError: malformed node or string: <_ast.Name object at 0x0000028609B92DA0>\n\n..\\..\\lib\\ast.py:55: ValueError"}, "description": "\n        调用接口\n        :param data: 接口信息\n        :return:\n        ", "steps": [{"name": "传入用例", "status": "broken", "statusDetails": {"message": "ValueError: malformed node or string: <_ast.Name object at 0x0000028609B92DA0>\n", "trace": "  File \"F:\\Python\\lib\\site-packages\\allure_commons\\_allure.py\", line 172, in impl\n    return func(*a, **kw)\n  File \"F:\\Python\\Test_learn\\API_testing_framework\\test_case\\test_api.py\", line 70, in test_gwyc_api\n    allure.attach(\"验证响应数据，{0}\".format(print(assert_content(data['case_result'], r.json()))))\n  File \"F:\\Python\\Test_learn\\API_testing_framework\\common\\assert_result.py\", line 12, in assert_content\n    case_result =ast.literal_eval(case_result)\n  File \"F:\\Python\\lib\\ast.py\", line 91, in literal_eval\n    return _convert(node_or_string)\n  File \"F:\\Python\\lib\\ast.py\", line 79, in _convert\n    map(_convert, node.values)))\n  File \"F:\\Python\\lib\\ast.py\", line 90, in _convert\n    return _convert_signed_num(node)\n  File \"F:\\Python\\lib\\ast.py\", line 63, in _convert_signed_num\n    return _convert_num(node)\n  File \"F:\\Python\\lib\\ast.py\", line 55, in _convert_num\n    raise ValueError('malformed node or string: ' + repr(node))\n"}, "attachments": [{"name": "{'success': True, 'object': {'id': 'd12150f1bbox6015b4f610a22829c133', 'page_size': 100000, 'page_index': 1, 'name': '芊芊', 'sex': 0, 'phone_number': '13577777777', 'cj_id': '8a70251bbbox60158f58496327066cbb', 'cj_type': 4, 'clerk_type': 2, 'image_illumination': 'http://file.dyzhkj.cn/reader/15671499544956bhqz61566543935769.jpg', 'city_name': '无', 'introduction': '可爱111', 'baseinfo_id': 'e623a8ae5ad2479489bb021e327a2fc8', 'is_online': 1, 'is_register': 1, 'ry_token': '2GxPxBs0oW8Vb1DSzGg3P+YPrjBTIh82TwMufmtvEnaXWSQRexSS4xNIBjY8A2d2gqW/zy6XdI35BCgGSfxjqRSGm4wOJ27Srfr55A3f9heTmUP/NISEwCM87c0iNppd', 'ry_id': 'e623a8ae5ad2479489bb021e327a2fc8', 'city_id': '6667', 'group_id': '901eed42bbox60158cdd305212b38c3e', 'cj_name': '可可连锁1'}, 'message': '', 'code': '200', 'remark': '', 'time': '2020-12-24 14:02:34', 'addition': '', 'id': ''}", "source": "7c19bcdf-5840-48e9-adb3-13cdce49aeab-attachment.attach"}], "parameters": [{"name": "data", "value": "{'case_id': 'case_002', 'case_module': '登录', 'case_name': '登录店员端', 'case_url': 'http://39.108.95.246:6218/bbox2-web-mobile-cat/clerk/loginForClerk', 'case_method': 'post', 'case_type': 'json', 'case_data': '{\"code\":\"666666\",\"phone\":\"13577777777\",\"app_id\":\"6015\",\"cj_type\":0,\"token\":\"TOKEN\",\"user_id\":\"USER_ID\"}', 'case_headers': \"{'Content-Type': 'application/json;charset=UTF-8'}\", 'case_preposition': '', 'case_isRun': 'y', 'case_code': 200.0, 'case_result': '{\"success\":true}'}"}], "start": 1608789754120, "stop": 1608789754252}], "parameters": [{"name": "data", "value": "{'case_id': 'case_002', 'case_module': '登录', 'case_name': '登录店员端', 'case_url': 'http://39.108.95.246:6218/bbox2-web-mobile-cat/clerk/loginForClerk', 'case_method': 'post', 'case_type': 'json', 'case_data': '{\"code\":\"666666\",\"phone\":\"13577777777\",\"app_id\":\"6015\",\"cj_type\":0,\"token\":\"TOKEN\",\"user_id\":\"USER_ID\"}', 'case_headers': \"{'Content-Type': 'application/json;charset=UTF-8'}\", 'case_preposition': '', 'case_isRun': 'y', 'case_code': 200.0, 'case_result': '{\"success\":true}'}"}], "start": 1608789754119, "stop": 1608789754253, "uuid": "d2e4852d-c81f-43b5-a39d-3d141d81d3ce", "historyId": "a9ee1ddb01c8ff441ca91ab4932a3cee", "testCaseId": "358b03d52522980069a2f8b0aaa8009b", "fullName": "test_case.test_api.Test_API#test_gwyc_api", "labels": [{"name": "story", "value": "登录"}, {"name": "feature", "value": "接口自动化测试用例"}, {"name": "parentSuite", "value": "test_case"}, {"name": "suite", "value": "test_api"}, {"name": "subSuite", "value": "Test_API"}, {"name": "host", "value": "DESKTOP-MS3E5GO"}, {"name": "thread", "value": "18324-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_case.test_api"}]}