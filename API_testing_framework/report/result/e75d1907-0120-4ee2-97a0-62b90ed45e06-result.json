{"name": "登录店员端", "status": "broken", "statusDetails": {"message": "ValueError: Row or column values must be at least 1", "trace": "self = <test_api.Test_API object at 0x00000254A9141780>\ndata = {'case_assert': '{\"success\":true}', 'case_code': 200.0, 'case_data': '{\"code\":\"666666\",\"phone\":\"13577777777\",\"app_id\":...pe\":0,\"token\":\"TOKEN\",\"user_id\":\"USER_ID\"}', 'case_headers': \"{'Content-Type': 'application/json;charset=UTF-8'}\", ...}\n\n    @pytest.mark.parametrize('data', excel) #传入参数\n    @allure.step('传入用例')    #设置用例步骤\n    @allure.severity('blocker')     #设置用例严重级别为“中断缺陷”客户端程序无响应，无法执行下一步\n    def test_gwyc_api(self,data):\n        \"\"\"\n        调用接口\n        :param data: 接口信息\n        :return:\n        \"\"\"\n        # for i in data:\n        #     data = i\n        #     return data\n    \n        allure.dynamic.story(data['case_module'])\n        allure.dynamic.title(data['case_name'])\n    \n        # 对请求头做为空处理并添加token\n        headers = data['case_headers']\n        #将字符串转化为字典\n        headers = ast.literal_eval(headers)\n    \n    \n        # 对请求参数做为空处理\n        params = data['case_data']\n        if len(str(params).split()) == 0:\n            pass\n        elif len(str(params)) >= 0:\n            params = params\n    \n    \n    \n    \n    \n        # 执行用例\n        if data['case_method'] == 'get':\n            r = ApiRequst().send_requests(\n                method='get',\n                url=data['case_url'],\n                json=params,\n                headers=headers\n            )\n            allure.attach(\"返回结果\",'{0}'.format(r.json()))#在报告中显示返回结果\n            assert int(r.json()['code']) == int(data['case_code'])   # 断言验证状态码\n            a = assert_content(data['case_assert'], r.json())   # 验证响应数据\n            allure.attach(\"验证响应数据，{0}\".format(a))\n    \n    \n        elif data['case_method'] == 'post':\n            r = ApiRequst().send_requests(\n                method='post',\n                url=data['case_url'],\n                json=ast.literal_eval(params),\n                headers=headers\n            )\n    \n            allure.attach(\"返回结果\",'{0}'.format(r.json()))\n            assert int(r.json()['code']) == int(data['case_code'])  # 验证状态码\n            asserts = assert_content(data['case_assert'], r.json()) #调用断言验证方法\n            allure.attach(\"验证响应数据，{0}\".format(asserts))  # 在allure报告中显示验证响应数据\n            if asserts == '断言结果成功':\n                data['case_result'] = 'Pass'\n                data['case_remarks'] = asserts\n            else:\n                data['case_result'] = 'Fail'\n                data['case_remarks'] = asserts\n>           reault = OperationExcel().write(data)\n\ntest_case\\test_api.py:88: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nutils\\openrationExcel.py:74: in write\n    sheet.cell(row, col, item)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <Worksheet \"Sheet1\">, row = 0, column = 0, value = 'case_id'\n\n    def cell(self, row, column, value=None):\n        \"\"\"\n        Returns a cell object based on the given coordinates.\n    \n        Usage: cell(row=15, column=1, value=5)\n    \n        Calling `cell` creates cells in memory when they\n        are first accessed.\n    \n        :param row: row index of the cell (e.g. 4)\n        :type row: int\n    \n        :param column: column index of the cell (e.g. 3)\n        :type column: int\n    \n        :param value: value of the cell (e.g. 5)\n        :type value: numeric or time or string or bool or none\n    \n        :rtype: openpyxl.cell.cell.Cell\n        \"\"\"\n    \n        if row < 1 or column < 1:\n>           raise ValueError(\"Row or column values must be at least 1\")\nE           ValueError: Row or column values must be at least 1\n\n..\\..\\lib\\site-packages\\openpyxl\\worksheet\\worksheet.py:238: ValueError"}, "description": "\n        调用接口\n        :param data: 接口信息\n        :return:\n        ", "steps": [{"name": "传入用例", "status": "broken", "statusDetails": {"message": "ValueError: Row or column values must be at least 1\n", "trace": "  File \"F:\\Python\\lib\\site-packages\\allure_commons\\_allure.py\", line 172, in impl\n    return func(*a, **kw)\n  File \"F:\\Python\\Test_learn\\API_testing_framework\\test_case\\test_api.py\", line 88, in test_gwyc_api\n    reault = OperationExcel().write(data)\n  File \"F:\\Python\\Test_learn\\API_testing_framework\\utils\\openrationExcel.py\", line 74, in write\n    sheet.cell(row, col, item)\n  File \"F:\\Python\\lib\\site-packages\\openpyxl\\worksheet\\worksheet.py\", line 238, in cell\n    raise ValueError(\"Row or column values must be at least 1\")\n"}, "attachments": [{"name": "{'success': True, 'object': {'id': 'd12150f1bbox6015b4f610a22829c133', 'page_size': 100000, 'page_index': 1, 'name': '芊芊', 'sex': 0, 'phone_number': '13577777777', 'cj_id': '8a70251bbbox60158f58496327066cbb', 'cj_type': 4, 'clerk_type': 2, 'image_illumination': 'http://file.dyzhkj.cn/reader/15671499544956bhqz61566543935769.jpg', 'city_name': '无', 'introduction': '可爱111', 'baseinfo_id': 'e623a8ae5ad2479489bb021e327a2fc8', 'is_online': 1, 'is_register': 1, 'ry_token': '2GxPxBs0oW8Vb1DSzGg3P+YPrjBTIh82TwMufmtvEnaXWSQRexSS4xNIBjY8A2d2gqW/zy6XdI35BCgGSfxjqRSGm4wOJ27Srfr55A3f9heTmUP/NISEwCM87c0iNppd', 'ry_id': 'e623a8ae5ad2479489bb021e327a2fc8', 'city_id': '6667', 'group_id': '901eed42bbox60158cdd305212b38c3e', 'cj_name': '可可连锁1'}, 'message': '', 'code': '200', 'remark': '', 'time': '2020-12-29 18:26:28', 'addition': '', 'id': ''}", "source": "abfb7f85-eb24-4cc6-aa1a-ccbbe69b0c2c-attachment.attach"}, {"source": "463068ae-a6d1-46bb-8cd0-e7c83c4ebbba-attachment.attach"}], "parameters": [{"name": "data", "value": "{'case_id': 2.0, 'case_module': '登录', 'case_name': '登录店员端', 'case_url': 'http://39.108.95.246:6218/bbox2-web-mobile-cat/clerk/loginForClerk', 'case_method': 'post', 'case_type': 'json', 'case_data': '{\"code\":\"666666\",\"phone\":\"13577777777\",\"app_id\":\"6015\",\"cj_type\":0,\"token\":\"TOKEN\",\"user_id\":\"USER_ID\"}', 'case_headers': \"{'Content-Type': 'application/json;charset=UTF-8'}\", 'case_preposition': '', 'case_isRun': 'y', 'case_code': 200.0, 'case_assert': '{\"success\":true}', 'case_result': '', 'case_remarks': ''}"}], "start": 1609237588594, "stop": 1609237588743}], "parameters": [{"name": "data", "value": "{'case_id': 2.0, 'case_module': '登录', 'case_name': '登录店员端', 'case_url': 'http://39.108.95.246:6218/bbox2-web-mobile-cat/clerk/loginForClerk', 'case_method': 'post', 'case_type': 'json', 'case_data': '{\"code\":\"666666\",\"phone\":\"13577777777\",\"app_id\":\"6015\",\"cj_type\":0,\"token\":\"TOKEN\",\"user_id\":\"USER_ID\"}', 'case_headers': \"{'Content-Type': 'application/json;charset=UTF-8'}\", 'case_preposition': '', 'case_isRun': 'y', 'case_code': 200.0, 'case_assert': '{\"success\":true}', 'case_result': '', 'case_remarks': ''}"}], "start": 1609237588594, "stop": 1609237588744, "uuid": "915eaad5-8d39-4ed7-915a-da62c0dd7bc3", "historyId": "a9ee1ddb01c8ff441ca91ab4932a3cee", "testCaseId": "358b03d52522980069a2f8b0aaa8009b", "fullName": "test_case.test_api.Test_API#test_gwyc_api", "labels": [{"name": "story", "value": "登录"}, {"name": "feature", "value": "接口自动化测试用例"}, {"name": "severity", "value": "blocker"}, {"name": "parentSuite", "value": "test_case"}, {"name": "suite", "value": "test_api"}, {"name": "subSuite", "value": "Test_API"}, {"name": "host", "value": "DESKTOP-MS3E5GO"}, {"name": "thread", "value": "5344-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_case.test_api"}]}