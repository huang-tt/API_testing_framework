{
  "uid" : "4b8f4e2d5abd0b18",
  "name" : "登录店员端",
  "fullName" : "test_case.test_api.Test_API#test_gwyc_api",
  "historyId" : "a9ee1ddb01c8ff441ca91ab4932a3cee",
  "time" : {
    "start" : 1609233415799,
    "stop" : 1609233415959,
    "duration" : 160
  },
  "description" : "\n        调用接口\n        :param data: 接口信息\n        :return:\n        ",
  "descriptionHtml" : "<pre><code>    调用接口\n    :param data: 接口信息\n    :return:\n</code></pre>\n",
  "status" : "broken",
  "statusMessage" : "xlsxwriter.exceptions.FileCreateError: [Errno 13] Permission denied: 'F:\\\\Python\\\\Test_learn\\\\API_testing_framework\\\\data\\\\result.xlsx'",
  "statusTrace" : "self = <xlsxwriter.workbook.Workbook object at 0x0000023201A4E518>\n\n    def close(self):\n        \"\"\"\n        Call finalization code and close file.\n    \n        Args:\n            None.\n    \n        Returns:\n            Nothing.\n    \n        \"\"\"\n        if not self.fileclosed:\n    \n            try:\n>               self._store_workbook()\n\n..\\..\\lib\\site-packages\\xlsxwriter\\workbook.py:320: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <xlsxwriter.workbook.Workbook object at 0x0000023201A4E518>\n\n    def _store_workbook(self):\n    \n        # Create the xlsx/zip file.\n        try:\n            xlsx_file = ZipFile(self.filename, \"w\", compression=ZIP_DEFLATED,\n                                allowZip64=self.allow_zip64)\n        except IOError as e:\n>           raise e\n\n..\\..\\lib\\site-packages\\xlsxwriter\\workbook.py:638: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <xlsxwriter.workbook.Workbook object at 0x0000023201A4E518>\n\n    def _store_workbook(self):\n    \n        # Create the xlsx/zip file.\n        try:\n            xlsx_file = ZipFile(self.filename, \"w\", compression=ZIP_DEFLATED,\n>                               allowZip64=self.allow_zip64)\n\n..\\..\\lib\\site-packages\\xlsxwriter\\workbook.py:636: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <zipfile.ZipFile [closed]>\nfile = 'F:\\\\Python\\\\Test_learn\\\\API_testing_framework\\\\data\\\\result.xlsx'\nmode = 'w', compression = 8, allowZip64 = False, compresslevel = None\n\n    def __init__(self, file, mode=\"r\", compression=ZIP_STORED, allowZip64=True,\n                 compresslevel=None):\n        \"\"\"Open the ZIP file with mode read 'r', write 'w', exclusive create 'x',\n        or append 'a'.\"\"\"\n        if mode not in ('r', 'w', 'x', 'a'):\n            raise ValueError(\"ZipFile requires mode 'r', 'w', 'x', or 'a'\")\n    \n        _check_compression(compression)\n    \n        self._allowZip64 = allowZip64\n        self._didModify = False\n        self.debug = 0  # Level of printing: 0 through 3\n        self.NameToInfo = {}    # Find file info given name\n        self.filelist = []      # List of ZipInfo instances for archive\n        self.compression = compression  # Method of compression\n        self.compresslevel = compresslevel\n        self.mode = mode\n        self.pwd = None\n        self._comment = b''\n    \n        # Check if we were passed a file-like object\n        if isinstance(file, os.PathLike):\n            file = os.fspath(file)\n        if isinstance(file, str):\n            # No, it's a filename\n            self._filePassed = 0\n            self.filename = file\n            modeDict = {'r' : 'rb', 'w': 'w+b', 'x': 'x+b', 'a' : 'r+b',\n                        'r+b': 'w+b', 'w+b': 'wb', 'x+b': 'xb'}\n            filemode = modeDict[mode]\n            while True:\n                try:\n>                   self.fp = io.open(file, filemode)\nE                   PermissionError: [Errno 13] Permission denied: 'F:\\\\Python\\\\Test_learn\\\\API_testing_framework\\\\data\\\\result.xlsx'\n\n..\\..\\lib\\zipfile.py:1182: PermissionError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_api.Test_API object at 0x00000232010282E8>\ndata = {'case_assert': '{\"success\":true}', 'case_code': 200.0, 'case_data': '{\"code\":\"666666\",\"phone\":\"13577777777\",\"app_id\":...pe\":0,\"token\":\"TOKEN\",\"user_id\":\"USER_ID\"}', 'case_headers': \"{'Content-Type': 'application/json;charset=UTF-8'}\", ...}\n\n    @pytest.mark.parametrize('data', excel) #传入参数\n    @allure.step('传入用例')    #设置用例步骤\n    @allure.severity('blocker')     #设置用例严重级别为“中断缺陷”客户端程序无响应，无法执行下一步\n    def test_gwyc_api(self,data):\n        \"\"\"\n        调用接口\n        :param data: 接口信息\n        :return:\n        \"\"\"\n        # for i in data:\n        #     data = i\n        #     return data\n    \n        allure.dynamic.story(data['case_module'])\n        allure.dynamic.title(data['case_name'])\n    \n        # 对请求头做为空处理并添加token\n        headers = data['case_headers']\n        #将字符串转化为字典\n        headers = ast.literal_eval(headers)\n    \n    \n        # 对请求参数做为空处理\n        params = data['case_data']\n        if len(str(params).split()) == 0:\n            pass\n        elif len(str(params)) >= 0:\n            params = params\n    \n    \n    \n    \n    \n        # 执行用例\n        if data['case_method'] == 'get':\n            r = ApiRequst().send_requests(\n                method='get',\n                url=data['case_url'],\n                json=params,\n                headers=headers\n            )\n            allure.attach(\"返回结果\",'{0}'.format(r.json()))#在报告中显示返回结果\n            assert int(r.json()['code']) == int(data['case_code'])   # 断言验证状态码\n            a = assert_content(data['case_assert'], r.json())   # 验证响应数据\n            allure.attach(\"验证响应数据，{0}\".format(a))\n    \n    \n        elif data['case_method'] == 'post':\n            r = ApiRequst().send_requests(\n                method='post',\n                url=data['case_url'],\n                json=ast.literal_eval(params),\n                headers=headers\n            )\n    \n            allure.attach(\"返回结果\",'{0}'.format(r.json()))\n            assert int(r.json()['code']) == int(data['case_code'])  # 验证状态码\n            asserts = assert_content(data['case_assert'], r.json()) #调用断言验证方法\n            allure.attach(\"验证响应数据，{0}\".format(asserts))  # 在allure报告中显示验证响应数据\n            if asserts == '断言结果成功':\n                data['case_result'] = 'Pass'\n                data['case_remarks'] = asserts\n            else:\n                data['case_result'] = 'Fail'\n                data['case_remarks'] = asserts\n>           reault = OperationExcel().write(data, 'api_report')\n\ntest_case\\test_api.py:88: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nutils\\openrationExcel.py:83: in write\n    workbook.close()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <xlsxwriter.workbook.Workbook object at 0x0000023201A4E518>\n\n    def close(self):\n        \"\"\"\n        Call finalization code and close file.\n    \n        Args:\n            None.\n    \n        Returns:\n            Nothing.\n    \n        \"\"\"\n        if not self.fileclosed:\n    \n            try:\n                self._store_workbook()\n            except IOError as e:\n>               raise FileCreateError(e)\nE               xlsxwriter.exceptions.FileCreateError: [Errno 13] Permission denied: 'F:\\\\Python\\\\Test_learn\\\\API_testing_framework\\\\data\\\\result.xlsx'\n\n..\\..\\lib\\site-packages\\xlsxwriter\\workbook.py:322: FileCreateError",
  "flaky" : false,
  "beforeStages" : [ ],
  "testStage" : {
    "description" : "\n        调用接口\n        :param data: 接口信息\n        :return:\n        ",
    "status" : "broken",
    "statusMessage" : "xlsxwriter.exceptions.FileCreateError: [Errno 13] Permission denied: 'F:\\\\Python\\\\Test_learn\\\\API_testing_framework\\\\data\\\\result.xlsx'",
    "statusTrace" : "self = <xlsxwriter.workbook.Workbook object at 0x0000023201A4E518>\n\n    def close(self):\n        \"\"\"\n        Call finalization code and close file.\n    \n        Args:\n            None.\n    \n        Returns:\n            Nothing.\n    \n        \"\"\"\n        if not self.fileclosed:\n    \n            try:\n>               self._store_workbook()\n\n..\\..\\lib\\site-packages\\xlsxwriter\\workbook.py:320: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <xlsxwriter.workbook.Workbook object at 0x0000023201A4E518>\n\n    def _store_workbook(self):\n    \n        # Create the xlsx/zip file.\n        try:\n            xlsx_file = ZipFile(self.filename, \"w\", compression=ZIP_DEFLATED,\n                                allowZip64=self.allow_zip64)\n        except IOError as e:\n>           raise e\n\n..\\..\\lib\\site-packages\\xlsxwriter\\workbook.py:638: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <xlsxwriter.workbook.Workbook object at 0x0000023201A4E518>\n\n    def _store_workbook(self):\n    \n        # Create the xlsx/zip file.\n        try:\n            xlsx_file = ZipFile(self.filename, \"w\", compression=ZIP_DEFLATED,\n>                               allowZip64=self.allow_zip64)\n\n..\\..\\lib\\site-packages\\xlsxwriter\\workbook.py:636: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <zipfile.ZipFile [closed]>\nfile = 'F:\\\\Python\\\\Test_learn\\\\API_testing_framework\\\\data\\\\result.xlsx'\nmode = 'w', compression = 8, allowZip64 = False, compresslevel = None\n\n    def __init__(self, file, mode=\"r\", compression=ZIP_STORED, allowZip64=True,\n                 compresslevel=None):\n        \"\"\"Open the ZIP file with mode read 'r', write 'w', exclusive create 'x',\n        or append 'a'.\"\"\"\n        if mode not in ('r', 'w', 'x', 'a'):\n            raise ValueError(\"ZipFile requires mode 'r', 'w', 'x', or 'a'\")\n    \n        _check_compression(compression)\n    \n        self._allowZip64 = allowZip64\n        self._didModify = False\n        self.debug = 0  # Level of printing: 0 through 3\n        self.NameToInfo = {}    # Find file info given name\n        self.filelist = []      # List of ZipInfo instances for archive\n        self.compression = compression  # Method of compression\n        self.compresslevel = compresslevel\n        self.mode = mode\n        self.pwd = None\n        self._comment = b''\n    \n        # Check if we were passed a file-like object\n        if isinstance(file, os.PathLike):\n            file = os.fspath(file)\n        if isinstance(file, str):\n            # No, it's a filename\n            self._filePassed = 0\n            self.filename = file\n            modeDict = {'r' : 'rb', 'w': 'w+b', 'x': 'x+b', 'a' : 'r+b',\n                        'r+b': 'w+b', 'w+b': 'wb', 'x+b': 'xb'}\n            filemode = modeDict[mode]\n            while True:\n                try:\n>                   self.fp = io.open(file, filemode)\nE                   PermissionError: [Errno 13] Permission denied: 'F:\\\\Python\\\\Test_learn\\\\API_testing_framework\\\\data\\\\result.xlsx'\n\n..\\..\\lib\\zipfile.py:1182: PermissionError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_api.Test_API object at 0x00000232010282E8>\ndata = {'case_assert': '{\"success\":true}', 'case_code': 200.0, 'case_data': '{\"code\":\"666666\",\"phone\":\"13577777777\",\"app_id\":...pe\":0,\"token\":\"TOKEN\",\"user_id\":\"USER_ID\"}', 'case_headers': \"{'Content-Type': 'application/json;charset=UTF-8'}\", ...}\n\n    @pytest.mark.parametrize('data', excel) #传入参数\n    @allure.step('传入用例')    #设置用例步骤\n    @allure.severity('blocker')     #设置用例严重级别为“中断缺陷”客户端程序无响应，无法执行下一步\n    def test_gwyc_api(self,data):\n        \"\"\"\n        调用接口\n        :param data: 接口信息\n        :return:\n        \"\"\"\n        # for i in data:\n        #     data = i\n        #     return data\n    \n        allure.dynamic.story(data['case_module'])\n        allure.dynamic.title(data['case_name'])\n    \n        # 对请求头做为空处理并添加token\n        headers = data['case_headers']\n        #将字符串转化为字典\n        headers = ast.literal_eval(headers)\n    \n    \n        # 对请求参数做为空处理\n        params = data['case_data']\n        if len(str(params).split()) == 0:\n            pass\n        elif len(str(params)) >= 0:\n            params = params\n    \n    \n    \n    \n    \n        # 执行用例\n        if data['case_method'] == 'get':\n            r = ApiRequst().send_requests(\n                method='get',\n                url=data['case_url'],\n                json=params,\n                headers=headers\n            )\n            allure.attach(\"返回结果\",'{0}'.format(r.json()))#在报告中显示返回结果\n            assert int(r.json()['code']) == int(data['case_code'])   # 断言验证状态码\n            a = assert_content(data['case_assert'], r.json())   # 验证响应数据\n            allure.attach(\"验证响应数据，{0}\".format(a))\n    \n    \n        elif data['case_method'] == 'post':\n            r = ApiRequst().send_requests(\n                method='post',\n                url=data['case_url'],\n                json=ast.literal_eval(params),\n                headers=headers\n            )\n    \n            allure.attach(\"返回结果\",'{0}'.format(r.json()))\n            assert int(r.json()['code']) == int(data['case_code'])  # 验证状态码\n            asserts = assert_content(data['case_assert'], r.json()) #调用断言验证方法\n            allure.attach(\"验证响应数据，{0}\".format(asserts))  # 在allure报告中显示验证响应数据\n            if asserts == '断言结果成功':\n                data['case_result'] = 'Pass'\n                data['case_remarks'] = asserts\n            else:\n                data['case_result'] = 'Fail'\n                data['case_remarks'] = asserts\n>           reault = OperationExcel().write(data, 'api_report')\n\ntest_case\\test_api.py:88: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nutils\\openrationExcel.py:83: in write\n    workbook.close()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <xlsxwriter.workbook.Workbook object at 0x0000023201A4E518>\n\n    def close(self):\n        \"\"\"\n        Call finalization code and close file.\n    \n        Args:\n            None.\n    \n        Returns:\n            Nothing.\n    \n        \"\"\"\n        if not self.fileclosed:\n    \n            try:\n                self._store_workbook()\n            except IOError as e:\n>               raise FileCreateError(e)\nE               xlsxwriter.exceptions.FileCreateError: [Errno 13] Permission denied: 'F:\\\\Python\\\\Test_learn\\\\API_testing_framework\\\\data\\\\result.xlsx'\n\n..\\..\\lib\\site-packages\\xlsxwriter\\workbook.py:322: FileCreateError",
    "steps" : [ {
      "name" : "传入用例",
      "time" : {
        "start" : 1609233415800,
        "stop" : 1609233415958,
        "duration" : 158
      },
      "status" : "broken",
      "statusMessage" : "xlsxwriter.exceptions.FileCreateError: [Errno 13] Permission denied: 'F:\\\\Python\\\\Test_learn\\\\API_testing_framework\\\\data\\\\result.xlsx'\n",
      "statusTrace" : "  File \"F:\\Python\\lib\\site-packages\\allure_commons\\_allure.py\", line 172, in impl\n    return func(*a, **kw)\n  File \"F:\\Python\\Test_learn\\API_testing_framework\\test_case\\test_api.py\", line 88, in test_gwyc_api\n    reault = OperationExcel().write(data, 'api_report')\n  File \"F:\\Python\\Test_learn\\API_testing_framework\\utils\\openrationExcel.py\", line 83, in write\n    workbook.close()\n  File \"F:\\Python\\lib\\site-packages\\xlsxwriter\\workbook.py\", line 322, in close\n    raise FileCreateError(e)\n",
      "steps" : [ ],
      "attachments" : [ {
        "uid" : "e6a429f7b60cb09d",
        "name" : "{'success': True, 'object': {'id': 'd12150f1bbox6015b4f610a22829c133', 'page_size': 100000, 'page_index': 1, 'name': '芊芊', 'sex': 0, 'phone_number': '13577777777', 'cj_id': '8a70251bbbox60158f58496327066cbb', 'cj_type': 4, 'clerk_type': 2, 'image_illumination': 'http://file.dyzhkj.cn/reader/15671499544956bhqz61566543935769.jpg', 'city_name': '无', 'introduction': '可爱111', 'baseinfo_id': 'e623a8ae5ad2479489bb021e327a2fc8', 'is_online': 1, 'is_register': 1, 'ry_token': '2GxPxBs0oW8Vb1DSzGg3P+YPrjBTIh82TwMufmtvEnaXWSQRexSS4xNIBjY8A2d2gqW/zy6XdI35BCgGSfxjqRSGm4wOJ27Srfr55A3f9heTmUP/NISEwCM87c0iNppd', 'ry_id': 'e623a8ae5ad2479489bb021e327a2fc8', 'city_id': '6667', 'group_id': '901eed42bbox60158cdd305212b38c3e', 'cj_name': '可可连锁1'}, 'message': '', 'code': '200', 'remark': '', 'time': '2020-12-29 17:16:55', 'addition': '', 'id': ''}",
        "source" : "e6a429f7b60cb09d.attach",
        "type" : "text/plain",
        "size" : 12
      }, {
        "uid" : "5ba0afc5c1a3bea8",
        "name" : "7e4e169b-b16f-4cae-8d85-bc8f3832fec0-attachment.attach",
        "source" : "5ba0afc5c1a3bea8.attach",
        "type" : "text/plain",
        "size" : 39
      } ],
      "parameters" : [ {
        "name" : "data",
        "value" : "{'case_id': 'case_002', 'case_module': '登录', 'case_name': '登录店员端', 'case_url': 'http://39.108.95.246:6218/bbox2-web-mobile-cat/clerk/loginForClerk', 'case_method': 'post', 'case_type': 'json', 'case_data': '{\"code\":\"666666\",\"phone\":\"13577777777\",\"app_id\":\"6015\",\"cj_type\":0,\"token\":\"TOKEN\",\"user_id\":\"USER_ID\"}', 'case_headers': \"{'Content-Type': 'application/json;charset=UTF-8'}\", 'case_preposition': '', 'case_isRun': 'y', 'case_code': 200.0, 'case_assert': '{\"success\":true}', 'case_result': '', 'case_remarks': ''}"
      } ],
      "attachmentsCount" : 2,
      "shouldDisplayMessage" : true,
      "hasContent" : true,
      "stepsCount" : 0
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 2,
    "shouldDisplayMessage" : true,
    "hasContent" : true,
    "stepsCount" : 1
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "story",
    "value" : "登录"
  }, {
    "name" : "feature",
    "value" : "接口自动化测试用例"
  }, {
    "name" : "severity",
    "value" : "blocker"
  }, {
    "name" : "parentSuite",
    "value" : "test_case"
  }, {
    "name" : "suite",
    "value" : "test_api"
  }, {
    "name" : "subSuite",
    "value" : "Test_API"
  }, {
    "name" : "host",
    "value" : "DESKTOP-MS3E5GO"
  }, {
    "name" : "thread",
    "value" : "10368-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "test_case.test_api"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "data",
    "value" : "{'case_id': 'case_002', 'case_module': '登录', 'case_name': '登录店员端', 'case_url': 'http://39.108.95.246:6218/bbox2-web-mobile-cat/clerk/loginForClerk', 'case_method': 'post', 'case_type': 'json', 'case_data': '{\"code\":\"666666\",\"phone\":\"13577777777\",\"app_id\":\"6015\",\"cj_type\":0,\"token\":\"TOKEN\",\"user_id\":\"USER_ID\"}', 'case_headers': \"{'Content-Type': 'application/json;charset=UTF-8'}\", 'case_preposition': '', 'case_isRun': 'y', 'case_code': 200.0, 'case_assert': '{\"success\":true}', 'case_result': '', 'case_remarks': ''}"
  } ],
  "links" : [ ],
  "hidden" : true,
  "retry" : true,
  "extra" : {
    "categories" : [ ],
    "tags" : [ ]
  },
  "source" : "4b8f4e2d5abd0b18.json",
  "parameterValues" : [ "{'case_id': 'case_002', 'case_module': '登录', 'case_name': '登录店员端', 'case_url': 'http://39.108.95.246:6218/bbox2-web-mobile-cat/clerk/loginForClerk', 'case_method': 'post', 'case_type': 'json', 'case_data': '{\"code\":\"666666\",\"phone\":\"13577777777\",\"app_id\":\"6015\",\"cj_type\":0,\"token\":\"TOKEN\",\"user_id\":\"USER_ID\"}', 'case_headers': \"{'Content-Type': 'application/json;charset=UTF-8'}\", 'case_preposition': '', 'case_isRun': 'y', 'case_code': 200.0, 'case_assert': '{\"success\":true}', 'case_result': '', 'case_remarks': ''}" ]
}