{
  "uid" : "6a6b1ccfdaf7013d",
  "name" : "登录店员端",
  "fullName" : "test_case.test_api.Test_API#test_gwyc_api",
  "historyId" : "a9ee1ddb01c8ff441ca91ab4932a3cee",
  "time" : {
    "start" : 1608789435493,
    "stop" : 1608789435627,
    "duration" : 134
  },
  "description" : "\n        调用接口\n        :param data: 接口信息\n        :return:\n        ",
  "descriptionHtml" : "<pre><code>    调用接口\n    :param data: 接口信息\n    :return:\n</code></pre>\n",
  "status" : "broken",
  "statusMessage" : "ValueError: malformed node or string: <_ast.Name object at 0x000001F0DDFD2DD8>",
  "statusTrace" : "self = <test_api.Test_API object at 0x000001F0DDF48198>\ndata = {'case_code': 200.0, 'case_data': '{\"code\":\"666666\",\"phone\":\"13577777777\",\"app_id\":\"6015\",\"cj_type\":0,\"token\":\"TOKEN\",\"user_id\":\"USER_ID\"}', 'case_headers': \"{'Content-Type': 'application/json;charset=UTF-8'}\", 'case_id': 'case_002', ...}\n\n    @pytest.mark.parametrize('data', excel)\n    @allure.step('传入用例')\n    def test_gwyc_api(self,data):\n        \"\"\"\n        调用接口\n        :param data: 接口信息\n        :return:\n        \"\"\"\n        # for i in data:\n        #     data = i\n        #     return data\n    \n        allure.dynamic.story(data['case_module'])\n        allure.dynamic.title(data['case_name'])\n    \n        # 对请求头做为空处理并添加token\n        headers = data['case_headers']\n        #将字符串转化为字典\n        headers = ast.literal_eval(headers)\n    \n    \n        # 对请求参数做为空处理\n        params = data['case_data']\n        if len(str(params).split()) == 0:\n            pass\n        elif len(str(params)) >= 0:\n            params = params\n    \n    \n    \n        # 执行用例\n        if data['case_method'] == 'get':\n            r = ApiRequst().send_requests(\n                method='get',\n                url=data['case_url'],\n                json=params,\n                headers=headers\n            )\n            allure.attach(\"返回结果\",'{0}'.format(r.json()))#在报告中显示返回结果\n            assert int(r.json()['code']) == int(data['case_code'])   # 断言验证状态码\n            allure.attach(\"验证响应数据，{0}\".format(print(assert_content(data['case_result'],r.json()))))\n    \n            # assert data['case_result'] in json.dumps(r.json(), ensure_ascii=False)  # 验证响应数据\n        elif data['case_method'] == 'post':\n            r = ApiRequst().send_requests(\n                method='post',\n                url=data['case_url'],\n                json=ast.literal_eval(params),\n                headers=headers\n            )\n            allure.attach(\"返回结果\",'{0}'.format(r.json()))\n            assert int(r.json()['code']) == int(data['case_code'])  # 验证状态码\n>           allure.attach(\"验证响应数据，{0}\".format(print(assert_content(data['case_result'], r.json()))))\n\ntest_case\\test_api.py:70: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ncommon\\assert_result.py:12: in assert_content\n    for t in ast.literal_eval(case_result).items():\n..\\..\\lib\\ast.py:91: in literal_eval\n    return _convert(node_or_string)\n..\\..\\lib\\ast.py:79: in _convert\n    map(_convert, node.values)))\n..\\..\\lib\\ast.py:90: in _convert\n    return _convert_signed_num(node)\n..\\..\\lib\\ast.py:63: in _convert_signed_num\n    return _convert_num(node)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nnode = <_ast.Name object at 0x000001F0DDFD2DD8>\n\n    def _convert_num(node):\n        if isinstance(node, Constant):\n            if isinstance(node.value, (int, float, complex)):\n                return node.value\n        elif isinstance(node, Num):\n            return node.n\n>       raise ValueError('malformed node or string: ' + repr(node))\nE       ValueError: malformed node or string: <_ast.Name object at 0x000001F0DDFD2DD8>\n\n..\\..\\lib\\ast.py:55: ValueError",
  "flaky" : false,
  "beforeStages" : [ ],
  "testStage" : {
    "description" : "\n        调用接口\n        :param data: 接口信息\n        :return:\n        ",
    "status" : "broken",
    "statusMessage" : "ValueError: malformed node or string: <_ast.Name object at 0x000001F0DDFD2DD8>",
    "statusTrace" : "self = <test_api.Test_API object at 0x000001F0DDF48198>\ndata = {'case_code': 200.0, 'case_data': '{\"code\":\"666666\",\"phone\":\"13577777777\",\"app_id\":\"6015\",\"cj_type\":0,\"token\":\"TOKEN\",\"user_id\":\"USER_ID\"}', 'case_headers': \"{'Content-Type': 'application/json;charset=UTF-8'}\", 'case_id': 'case_002', ...}\n\n    @pytest.mark.parametrize('data', excel)\n    @allure.step('传入用例')\n    def test_gwyc_api(self,data):\n        \"\"\"\n        调用接口\n        :param data: 接口信息\n        :return:\n        \"\"\"\n        # for i in data:\n        #     data = i\n        #     return data\n    \n        allure.dynamic.story(data['case_module'])\n        allure.dynamic.title(data['case_name'])\n    \n        # 对请求头做为空处理并添加token\n        headers = data['case_headers']\n        #将字符串转化为字典\n        headers = ast.literal_eval(headers)\n    \n    \n        # 对请求参数做为空处理\n        params = data['case_data']\n        if len(str(params).split()) == 0:\n            pass\n        elif len(str(params)) >= 0:\n            params = params\n    \n    \n    \n        # 执行用例\n        if data['case_method'] == 'get':\n            r = ApiRequst().send_requests(\n                method='get',\n                url=data['case_url'],\n                json=params,\n                headers=headers\n            )\n            allure.attach(\"返回结果\",'{0}'.format(r.json()))#在报告中显示返回结果\n            assert int(r.json()['code']) == int(data['case_code'])   # 断言验证状态码\n            allure.attach(\"验证响应数据，{0}\".format(print(assert_content(data['case_result'],r.json()))))\n    \n            # assert data['case_result'] in json.dumps(r.json(), ensure_ascii=False)  # 验证响应数据\n        elif data['case_method'] == 'post':\n            r = ApiRequst().send_requests(\n                method='post',\n                url=data['case_url'],\n                json=ast.literal_eval(params),\n                headers=headers\n            )\n            allure.attach(\"返回结果\",'{0}'.format(r.json()))\n            assert int(r.json()['code']) == int(data['case_code'])  # 验证状态码\n>           allure.attach(\"验证响应数据，{0}\".format(print(assert_content(data['case_result'], r.json()))))\n\ntest_case\\test_api.py:70: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ncommon\\assert_result.py:12: in assert_content\n    for t in ast.literal_eval(case_result).items():\n..\\..\\lib\\ast.py:91: in literal_eval\n    return _convert(node_or_string)\n..\\..\\lib\\ast.py:79: in _convert\n    map(_convert, node.values)))\n..\\..\\lib\\ast.py:90: in _convert\n    return _convert_signed_num(node)\n..\\..\\lib\\ast.py:63: in _convert_signed_num\n    return _convert_num(node)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nnode = <_ast.Name object at 0x000001F0DDFD2DD8>\n\n    def _convert_num(node):\n        if isinstance(node, Constant):\n            if isinstance(node.value, (int, float, complex)):\n                return node.value\n        elif isinstance(node, Num):\n            return node.n\n>       raise ValueError('malformed node or string: ' + repr(node))\nE       ValueError: malformed node or string: <_ast.Name object at 0x000001F0DDFD2DD8>\n\n..\\..\\lib\\ast.py:55: ValueError",
    "steps" : [ {
      "name" : "传入用例",
      "time" : {
        "start" : 1608789435494,
        "stop" : 1608789435627,
        "duration" : 133
      },
      "status" : "broken",
      "statusMessage" : "ValueError: malformed node or string: <_ast.Name object at 0x000001F0DDFD2DD8>\n",
      "statusTrace" : "  File \"F:\\Python\\lib\\site-packages\\allure_commons\\_allure.py\", line 172, in impl\n    return func(*a, **kw)\n  File \"F:\\Python\\Test_learn\\API_testing_framework\\test_case\\test_api.py\", line 70, in test_gwyc_api\n    allure.attach(\"验证响应数据，{0}\".format(print(assert_content(data['case_result'], r.json()))))\n  File \"F:\\Python\\Test_learn\\API_testing_framework\\common\\assert_result.py\", line 12, in assert_content\n    for t in ast.literal_eval(case_result).items():\n  File \"F:\\Python\\lib\\ast.py\", line 91, in literal_eval\n    return _convert(node_or_string)\n  File \"F:\\Python\\lib\\ast.py\", line 79, in _convert\n    map(_convert, node.values)))\n  File \"F:\\Python\\lib\\ast.py\", line 90, in _convert\n    return _convert_signed_num(node)\n  File \"F:\\Python\\lib\\ast.py\", line 63, in _convert_signed_num\n    return _convert_num(node)\n  File \"F:\\Python\\lib\\ast.py\", line 55, in _convert_num\n    raise ValueError('malformed node or string: ' + repr(node))\n",
      "steps" : [ ],
      "attachments" : [ {
        "uid" : "8b02ed6802690158",
        "name" : "{'success': True, 'object': {'id': 'd12150f1bbox6015b4f610a22829c133', 'page_size': 100000, 'page_index': 1, 'name': '芊芊', 'sex': 0, 'phone_number': '13577777777', 'cj_id': '8a70251bbbox60158f58496327066cbb', 'cj_type': 4, 'clerk_type': 2, 'image_illumination': 'http://file.dyzhkj.cn/reader/15671499544956bhqz61566543935769.jpg', 'city_name': '无', 'introduction': '可爱111', 'baseinfo_id': 'e623a8ae5ad2479489bb021e327a2fc8', 'is_online': 1, 'is_register': 1, 'ry_token': '2GxPxBs0oW8Vb1DSzGg3P+YPrjBTIh82TwMufmtvEnaXWSQRexSS4xNIBjY8A2d2gqW/zy6XdI35BCgGSfxjqRSGm4wOJ27Srfr55A3f9heTmUP/NISEwCM87c0iNppd', 'ry_id': 'e623a8ae5ad2479489bb021e327a2fc8', 'city_id': '6667', 'group_id': '901eed42bbox60158cdd305212b38c3e', 'cj_name': '可可连锁1'}, 'message': '', 'code': '200', 'remark': '', 'time': '2020-12-24 13:57:15', 'addition': '', 'id': ''}",
        "source" : "8b02ed6802690158.attach",
        "type" : "text/plain",
        "size" : 12
      } ],
      "parameters" : [ {
        "name" : "data",
        "value" : "{'case_id': 'case_002', 'case_module': '登录', 'case_name': '登录店员端', 'case_url': 'http://39.108.95.246:6218/bbox2-web-mobile-cat/clerk/loginForClerk', 'case_method': 'post', 'case_type': 'json', 'case_data': '{\"code\":\"666666\",\"phone\":\"13577777777\",\"app_id\":\"6015\",\"cj_type\":0,\"token\":\"TOKEN\",\"user_id\":\"USER_ID\"}', 'case_headers': \"{'Content-Type': 'application/json;charset=UTF-8'}\", 'case_preposition': '', 'case_isRun': 'y', 'case_code': 200.0, 'case_result': '{\"success\":true}'}"
      } ],
      "shouldDisplayMessage" : true,
      "attachmentsCount" : 1,
      "stepsCount" : 0,
      "hasContent" : true
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "shouldDisplayMessage" : true,
    "attachmentsCount" : 1,
    "stepsCount" : 1,
    "hasContent" : true
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "story",
    "value" : "登录"
  }, {
    "name" : "feature",
    "value" : "接口自动化测试用例"
  }, {
    "name" : "parentSuite",
    "value" : "test_case"
  }, {
    "name" : "suite",
    "value" : "test_api"
  }, {
    "name" : "subSuite",
    "value" : "Test_API"
  }, {
    "name" : "host",
    "value" : "DESKTOP-MS3E5GO"
  }, {
    "name" : "thread",
    "value" : "19140-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "test_case.test_api"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "data",
    "value" : "{'case_id': 'case_002', 'case_module': '登录', 'case_name': '登录店员端', 'case_url': 'http://39.108.95.246:6218/bbox2-web-mobile-cat/clerk/loginForClerk', 'case_method': 'post', 'case_type': 'json', 'case_data': '{\"code\":\"666666\",\"phone\":\"13577777777\",\"app_id\":\"6015\",\"cj_type\":0,\"token\":\"TOKEN\",\"user_id\":\"USER_ID\"}', 'case_headers': \"{'Content-Type': 'application/json;charset=UTF-8'}\", 'case_preposition': '', 'case_isRun': 'y', 'case_code': 200.0, 'case_result': '{\"success\":true}'}"
  } ],
  "links" : [ ],
  "hidden" : true,
  "retry" : true,
  "extra" : {
    "categories" : [ ],
    "tags" : [ ]
  },
  "source" : "6a6b1ccfdaf7013d.json",
  "parameterValues" : [ "{'case_id': 'case_002', 'case_module': '登录', 'case_name': '登录店员端', 'case_url': 'http://39.108.95.246:6218/bbox2-web-mobile-cat/clerk/loginForClerk', 'case_method': 'post', 'case_type': 'json', 'case_data': '{\"code\":\"666666\",\"phone\":\"13577777777\",\"app_id\":\"6015\",\"cj_type\":0,\"token\":\"TOKEN\",\"user_id\":\"USER_ID\"}', 'case_headers': \"{'Content-Type': 'application/json;charset=UTF-8'}\", 'case_preposition': '', 'case_isRun': 'y', 'case_code': 200.0, 'case_result': '{\"success\":true}'}" ]
}